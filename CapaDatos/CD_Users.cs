using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using CapaEntidad;
using System.Data.SqlClient;
using System.Data;
using System.Collections;

namespace CapaDatos
{
    public class CD_Users
    {
        public List<User> GetUsers()
        {
            List<User> newList = new List<User>();

            try
            {
                using (SqlConnection connection = new SqlConnection(Connection.cn))
                {
                    string query = "SELECT IdUser,Names,LastName,Email,Pass,Restored,Active from USER_DEP";
                    SqlCommand cmd = new SqlCommand(query, connection);
                    cmd.CommandType = CommandType.Text;

                    connection.Open();

                    using (SqlDataReader dr = cmd.ExecuteReader())
                    {
                        while (dr.Read())
                        {
                            newList.Add(
                                new User() {
                                    IdUser = Convert.ToInt32(dr["IdUser"]),
                                    Names = dr["Names"].ToString(),
                                    LastName = dr["LastName"].ToString(),
                                    Email = dr["Email"].ToString(),
                                    Pass = dr["Pass"].ToString(),
                                    Restored = Convert.ToBoolean(dr["Restored"]),
                                    Active = Convert.ToBoolean(dr["Active"])
                                }
                            );
                        }
                    }
                }
            }
            catch
            {
                newList = new List<User>();
            }
            return newList;
        }


        public int RegisterUser(User newUser, out string Message)
        {
            int idAutoGenerated = 0;
            Message = string.Empty;
            try
            {
                using (SqlConnection oconnection = new SqlConnection(Connection.cn))
                {
                    SqlCommand cmd = new SqlCommand("sp_RegisterUser", oconnection); //Maybe here is the problem with duplicated emails
                    cmd.Parameters.AddWithValue("Names", newUser.Names);
                    cmd.Parameters.AddWithValue("LastName", newUser.LastName);
                    cmd.Parameters.AddWithValue("Email", newUser.Email);
                    cmd.Parameters.AddWithValue("Pass", newUser.Pass);
                    cmd.Parameters.AddWithValue("Active", newUser.Active);
                    cmd.Parameters.Add("Result", SqlDbType.Int).Direction = ParameterDirection.Output;
                    cmd.Parameters.Add("Message", SqlDbType.VarChar, 500).Direction = ParameterDirection.Output;
                    cmd.CommandType = CommandType.StoredProcedure;

                    oconnection.Open();

                    cmd.ExecuteNonQuery();

                    idAutoGenerated = Convert.ToInt32(cmd.Parameters["Result"].Value);
                    Message = cmd.Parameters["Message"].ToString() == "Message" ? "Error de servidor" : cmd.Parameters["Message"].ToString(); //Check this, is sending message no duplicate users
                }

            } catch (Exception e)
            {
                idAutoGenerated = 0;
                Message = e.Message;
            }
            return idAutoGenerated;
        }

        public bool EditUser(User userToEdit, out string Message)
        {
            bool result = false;
            Message = string.Empty;
            try
            {
                using (SqlConnection oconnection = new SqlConnection(Connection.cn))
                {
                    SqlCommand cmd = new SqlCommand("sp_EditUser", oconnection);
                    cmd.Parameters.AddWithValue("IdUser", userToEdit.IdUser);
                    cmd.Parameters.AddWithValue("Names", userToEdit.Names);
                    cmd.Parameters.AddWithValue("LastName", userToEdit.LastName);
                    cmd.Parameters.AddWithValue("Email", userToEdit.Email);
                    cmd.Parameters.AddWithValue("Active", userToEdit.Active);
                    cmd.Parameters.Add("Result", SqlDbType.Bit).Direction = ParameterDirection.Output;
                    cmd.Parameters.Add("Message", SqlDbType.VarChar, 500).Direction = ParameterDirection.Output;
                    cmd.CommandType = CommandType.StoredProcedure;

                    oconnection.Open();

                    cmd.ExecuteNonQuery();

                    result = Convert.ToBoolean(cmd.Parameters["Result"].Value);
                    Message = cmd.Parameters["Message"].ToString();
                }
            }
            catch (Exception e)
            {
                result = false;
                Message = e.Message;
            }
            return result;
        }

        public bool DeleteUser(int idUserToDelete, out string Message)
        {
            bool result = false;
            Message = string.Empty;
            try
            {
                using (SqlConnection oconnection = new SqlConnection(Connection.cn))
                {
                    SqlCommand cmd = new SqlCommand("delete top (1) from USER_DEP WHERE IdUser = @idUserToDelete", oconnection);
                    cmd.Parameters.AddWithValue("@idUserToDelete", idUserToDelete);
                    cmd.CommandType = CommandType.Text;
                    oconnection.Open();
                    result = cmd.ExecuteNonQuery() > 0;
                }
            }
            catch (Exception e)
            {
                result = false;
                Message = e.Message;
            }
            return result;
        }

    }
}