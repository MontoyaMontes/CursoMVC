using System;
using System.Collections.Generic;
using System.Data.SqlClient;
using System.Data;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using CapaEntidad;
using System.Globalization;

namespace CapaDatos
{
    public class CD_Products
    {
        public List<Product> ListProducts()
        {
            List<Product> newList = new List<Product>();

            try
            {
                using (SqlConnection connection = new SqlConnection(Connection.cn))
                {
                    StringBuilder sb = new StringBuilder();
                    sb.AppendLine("SELECT p.IdProduct,p.NameProduct,p.Description,");
                    sb.AppendLine("b.IdBrand,b.Description[BrandDescription],");
                    sb.AppendLine("c.IdCategory,c.Description[CategoryDescription],");
                    sb.AppendLine("p.Price,p.Stock,p.ImageRoute,p.ImageName,p.Active");
                    sb.AppendLine("FROM PRODUCT p");
                    sb.AppendLine("INNER JOIN BRAND b ON b.IdBrand = p.IdBrand");
                    sb.AppendLine("INNER JOIN CATEGORY c ON c.IdCategory = p.IdCategory");

                    SqlCommand cmd = new SqlCommand(sb.ToString(), connection);
                    cmd.CommandType = CommandType.Text;

                    connection.Open();

                    using (SqlDataReader dr = cmd.ExecuteReader())
                    {
                        while (dr.Read())
                        {
                            newList.Add(
                                new Product()
                                {
                                    IdProduct = Convert.ToInt32(dr["IdProduct"]),
                                    NameProduct = dr["NameProduct"].ToString(),
                                    Description = dr["Description"].ToString(),
                                    objBrand = new Brand() { IdBrand = Convert.ToInt32(dr["IdBrand"]), Description = dr["BrandDescription"].ToString()},
                                    objCategory = new Category() { IdCategory = Convert.ToInt32(dr["IdCategory"]), Description = dr["CategoryDescription"].ToString()},
                                    Price = Convert.ToDecimal(dr["Price"].ToString(), new CultureInfo("es-MX")),
                                    Stock = Convert.ToInt32(dr["Stock"]),
                                    ImageRoute = dr["ImageRoute"].ToString(),
                                    ImageName = dr["ImageName"].ToString(),
                                    Active = Convert.ToBoolean(dr["Active"])
                                }
                            );
                        }
                    }
                }
            }
            catch
            {
                newList = new List<Product>();
            }
            return newList;
        }

        public int RegisterProduct(Product newProduct, out string Message)
        {
            int idAutoGenerated = 0;
            Message = string.Empty;
            try
            {
                using (SqlConnection oconnection = new SqlConnection(Connection.cn))
                {
                    SqlCommand cmd = new SqlCommand("sp_RegisterProduct", oconnection);
                    cmd.Parameters.AddWithValue("NameProduct", newProduct.NameProduct);
                    cmd.Parameters.AddWithValue("Description", newProduct.Description);
                    cmd.Parameters.AddWithValue("IdBrand", newProduct.objBrand.IdBrand);
                    cmd.Parameters.AddWithValue("IdCategory", newProduct.objCategory.IdCategory);
                    cmd.Parameters.AddWithValue("Price", newProduct.Price);
                    cmd.Parameters.AddWithValue("Stock", newProduct.Stock);
                    cmd.Parameters.AddWithValue("Active", newProduct.Active);
                    cmd.Parameters.Add("Result", SqlDbType.Int).Direction = ParameterDirection.Output;
                    cmd.Parameters.Add("Message", SqlDbType.VarChar, 500).Direction = ParameterDirection.Output;
                    cmd.CommandType = CommandType.StoredProcedure;

                    oconnection.Open();

                    cmd.ExecuteNonQuery();

                    idAutoGenerated = Convert.ToInt32(cmd.Parameters["Result"].Value); //see here
                    Message =  cmd.Parameters["Message"].ToString();
                }

            }
            catch (Exception e)
            {
                idAutoGenerated = 0;
                Message = e.Message;
            }
            return idAutoGenerated;
        }

        public bool EditProduct(Product productToEdit, out string Message)
        {
            bool result = false;
            Message = string.Empty;
            try
            {
                using (SqlConnection oconnection = new SqlConnection(Connection.cn))
                {
                    SqlCommand cmd = new SqlCommand("sp_EditProduct", oconnection);
                    cmd.Parameters.AddWithValue("IdProduct", productToEdit.IdProduct);
                    cmd.Parameters.AddWithValue("NameProduct", productToEdit.NameProduct);
                    cmd.Parameters.AddWithValue("Description", productToEdit.Description);
                    cmd.Parameters.AddWithValue("IdBrand", productToEdit.objBrand.IdBrand);
                    cmd.Parameters.AddWithValue("IdCategory", productToEdit.objCategory.IdCategory);
                    cmd.Parameters.AddWithValue("Price", productToEdit.Price);
                    cmd.Parameters.AddWithValue("Stock", productToEdit.Stock); 
                    cmd.Parameters.AddWithValue("Active", productToEdit.Active);
                    cmd.Parameters.Add("Result", SqlDbType.Bit).Direction = ParameterDirection.Output;
                    cmd.Parameters.Add("Message", SqlDbType.VarChar, 500).Direction = ParameterDirection.Output;
                    cmd.CommandType = CommandType.StoredProcedure;

                    oconnection.Open();

                    cmd.ExecuteNonQuery();

                    result = Convert.ToBoolean(cmd.Parameters["Result"].Value);
                    Message = cmd.Parameters["Message"].ToString();
                }
            }
            catch (Exception e)
            {
                result = false;
                Message = e.Message;
            }
            return result;
        }

        public bool DeleteProduct(int idProductToDelete, out string Message)
        {
            bool result = false;
            Message = string.Empty;
            try
            {
                using (SqlConnection oconnection = new SqlConnection(Connection.cn))
                {
                    SqlCommand cmd = new SqlCommand("sp_DeleteProduct", oconnection);
                    cmd.Parameters.AddWithValue("IdProduct", idProductToDelete);
                    cmd.Parameters.Add("Result", SqlDbType.Bit).Direction = ParameterDirection.Output;
                    cmd.Parameters.Add("Message", SqlDbType.VarChar, 500).Direction = ParameterDirection.Output;
                    cmd.CommandType = CommandType.StoredProcedure;

                    oconnection.Open();

                    cmd.ExecuteNonQuery();

                    result = Convert.ToBoolean(cmd.Parameters["Result"].Value);
                    Message = cmd.Parameters["Message"].ToString();
                }
            }
            catch (Exception e)
            {
                result = false;
                Message = e.Message;
            }
            return result;
        }
        public bool SaveImageData(Product objectProduct, out string Message)
        {
            bool result = false;
            Message = string.Empty;
            try
            {
                using (SqlConnection oconnection = new SqlConnection(Connection.cn))
                {
                    SqlCommand cmd = new SqlCommand("sp_RouteImages", oconnection);
                    cmd.Parameters.AddWithValue("IdProduct", objectProduct.IdProduct);
                    cmd.Parameters.AddWithValue("ImageRoute", objectProduct.ImageRoute);
                    cmd.Parameters.AddWithValue("ImageName", objectProduct.ImageName);
                    cmd.CommandType = CommandType.StoredProcedure;

                    oconnection.Open();

                    cmd.ExecuteNonQuery();

                    Message = cmd.Parameters["Message"].ToString() == "Message" ? "Error de servidor" : cmd.Parameters["Message"].ToString();
                    result = Convert.ToBoolean(cmd.Parameters["Result"].Value);

                }

            }
            catch (Exception e)
            {
                result = false;
                Message = e.Message;
            }
            return result;

        }

    }
}
